/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import Clases.Cl_Caja;
import Vistas.frm_ver_mis_productos;
import Clases.Cl_Conectar;
import Clases.Cl_Tipo_Doc;
import Clases.Cl_Varios;
import Clases.Cl_Moneda;
import Clases.Cl_Productos;
import Clases.Cl_Usuario;
import com.mxrck.autocompleter.TextAutoCompleter;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import casa_biblia.frm_menu;
import com.mxrck.autocompleter.AutoCompleterCallback;
import java.util.Calendar;

/**
 *
 * @author pc
 */
public final class frm_reg_pedido_cliente extends javax.swing.JInternalFrame {

    Cl_Varios ven = new Cl_Varios();
    Cl_Conectar con = new Cl_Conectar();
    Cl_Tipo_Doc tido = new Cl_Tipo_Doc();
    Cl_Productos mat = new Cl_Productos();
    Cl_Moneda mon = new Cl_Moneda();
    Cl_Caja caj = new Cl_Caja();
    Cl_Usuario usu = new Cl_Usuario();
    public static DefaultTableModel modelo_detalle;
    boolean reg_cli;
    Integer i;
    int id_cliente = 2;
    double total_new;
    double deuda_actual;
    double vuelto;
    double tc;
    int tienda = frm_menu.alm.getCodigo();
    String empresa = frm_menu.emp.getRuc();

    /**
     * Creates new form frm_reg_venta
     */
    public frm_reg_pedido_cliente() {
        initComponents();
        usu.ver_usuarios(cbx_usuario);
        int contar_cbx = cbx_usuario.getItemCount();
        int repetido = 0;
        for (int j = 0; j < contar_cbx; j++) {
            if (cbx_usuario.getItemAt(j).toString().equals(frm_menu.usu.getNick())) {
                repetido++;
            }
        }
        if (repetido == 0) {
            cbx_usuario.addItem(frm_menu.usu.getNick());
        }
        cbx_usuario.setSelectedItem(frm_menu.usu.getNick());

        modelo_detalle();

        cargar_productos_txt();
    }

    private void modelo_detalle() {
        //formato de tabla detalle de venta
        modelo_detalle = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int fila, int columna) {
                return columna == 4 || columna == 6;
            }
        };
        modelo_detalle.addColumn("Id");
        modelo_detalle.addColumn("Tip. Pro");
        modelo_detalle.addColumn("Descripcion");
        modelo_detalle.addColumn("Cant. Act.");
        modelo_detalle.addColumn("Cant.");
        modelo_detalle.addColumn("Und. Med");
        modelo_detalle.addColumn("Precio");
        modelo_detalle.addColumn("Parcial");
        t_detalle.setModel(modelo_detalle);
        t_detalle.getColumnModel().getColumn(0).setPreferredWidth(10);
        t_detalle.getColumnModel().getColumn(1).setPreferredWidth(20);
        t_detalle.getColumnModel().getColumn(2).setPreferredWidth(350);
        t_detalle.getColumnModel().getColumn(3).setPreferredWidth(30);
        t_detalle.getColumnModel().getColumn(4).setPreferredWidth(30);
        t_detalle.getColumnModel().getColumn(5).setPreferredWidth(30);
        t_detalle.getColumnModel().getColumn(6).setPreferredWidth(50);
        t_detalle.getColumnModel().getColumn(7).setPreferredWidth(50);
        ven.centrar_celda(t_detalle, 0);
        ven.centrar_celda(t_detalle, 1);
        ven.derecha_celda(t_detalle, 3);
        ven.derecha_celda(t_detalle, 4);
        ven.centrar_celda(t_detalle, 5);
        ven.derecha_celda(t_detalle, 6);
        ven.derecha_celda(t_detalle, 7);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jd_productos = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        txt_jd_buscar = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        t_jd_productos = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        lbl_ayuda = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_detalle = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txt_subt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_igv = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lbl_tot = new javax.swing.JLabel();
        btn_reg = new javax.swing.JButton();
        btn_clo = new javax.swing.JButton();
        btn_cam_can = new javax.swing.JButton();
        btn_eli = new javax.swing.JButton();
        txt_buscar_producto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cbx_usuario = new javax.swing.JComboBox();
        txt_usuario = new javax.swing.JTextField();
        btn_cam_pre = new javax.swing.JButton();
        lbl_ayuda_principal = new javax.swing.JLabel();

        jLabel1.setText("Buscar");

        txt_jd_buscar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_jd_buscarFocusGained(evt);
            }
        });
        txt_jd_buscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_jd_buscarKeyPressed(evt);
            }
        });

        t_jd_productos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        t_jd_productos.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                t_jd_productosFocusGained(evt);
            }
        });
        t_jd_productos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_jd_productosKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(t_jd_productos);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/cancel.png"))); // NOI18N
        jButton1.setText("Cerrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        lbl_ayuda.setText("Ayuda:");

        javax.swing.GroupLayout jd_productosLayout = new javax.swing.GroupLayout(jd_productos.getContentPane());
        jd_productos.getContentPane().setLayout(jd_productosLayout);
        jd_productosLayout.setHorizontalGroup(
            jd_productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_productosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jd_productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1047, Short.MAX_VALUE)
                    .addGroup(jd_productosLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_jd_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jd_productosLayout.createSequentialGroup()
                        .addComponent(lbl_ayuda)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jd_productosLayout.setVerticalGroup(
            jd_productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_productosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jd_productosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_jd_buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_ayuda, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        setTitle("Registro de Venta");

        jScrollPane1.setFocusable(false);

        t_detalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Descripcion", "Cant.", "Und. Med.", "Precio"
            }
        ));
        t_detalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                t_detalleMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                t_detalleMousePressed(evt);
            }
        });
        t_detalle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                t_detalleFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                t_detalleFocusLost(evt);
            }
        });
        t_detalle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                t_detalleKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(t_detalle);
        if (t_detalle.getColumnModel().getColumnCount() > 0) {
            t_detalle.getColumnModel().getColumn(0).setPreferredWidth(10);
            t_detalle.getColumnModel().getColumn(1).setPreferredWidth(350);
            t_detalle.getColumnModel().getColumn(2).setPreferredWidth(30);
            t_detalle.getColumnModel().getColumn(3).setPreferredWidth(20);
            t_detalle.getColumnModel().getColumn(4).setPreferredWidth(50);
        }

        jLabel2.setText("Sub Total:");
        jLabel2.setFocusable(false);

        txt_subt.setEditable(false);
        txt_subt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_subt.setFocusable(false);
        txt_subt.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel7.setText("IGV");
        jLabel7.setFocusable(false);

        txt_igv.setEditable(false);
        txt_igv.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txt_igv.setFocusable(false);
        txt_igv.setPreferredSize(new java.awt.Dimension(50, 20));

        jLabel8.setText("Total:");
        jLabel8.setFocusable(false);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Detalle de Venta:");
        jLabel9.setFocusable(false);

        lbl_tot.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lbl_tot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_tot.setText("S/. 0.00");
        lbl_tot.setFocusable(false);
        lbl_tot.setPreferredSize(new java.awt.Dimension(120, 52));

        btn_reg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/add.png"))); // NOI18N
        btn_reg.setText("Registrar");
        btn_reg.setEnabled(false);
        btn_reg.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_reg.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btn_reg.setPreferredSize(new java.awt.Dimension(85, 25));
        btn_reg.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        btn_reg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_regActionPerformed(evt);
            }
        });
        btn_reg.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                btn_regFocusGained(evt);
            }
        });

        btn_clo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/cancel.png"))); // NOI18N
        btn_clo.setText("Cancelar");
        btn_clo.setFocusable(false);
        btn_clo.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btn_clo.setPreferredSize(new java.awt.Dimension(85, 25));
        btn_clo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cloActionPerformed(evt);
            }
        });

        btn_cam_can.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/sockets.png"))); // NOI18N
        btn_cam_can.setText("Cambiar Cantidad");
        btn_cam_can.setEnabled(false);
        btn_cam_can.setFocusable(false);
        btn_cam_can.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cam_canActionPerformed(evt);
            }
        });

        btn_eli.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/bin_closed.png"))); // NOI18N
        btn_eli.setText("Eliminar Producto");
        btn_eli.setEnabled(false);
        btn_eli.setFocusable(false);
        btn_eli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliActionPerformed(evt);
            }
        });

        txt_buscar_producto.setEnabled(false);
        txt_buscar_producto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txt_buscar_productoFocusGained(evt);
            }
        });
        txt_buscar_producto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_buscar_productoKeyPressed(evt);
            }
        });

        jLabel3.setText("Vendedor:");

        cbx_usuario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cbx_usuarioFocusGained(evt);
            }
        });
        cbx_usuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cbx_usuarioKeyPressed(evt);
            }
        });

        txt_usuario.setEnabled(false);

        btn_cam_pre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/sockets.png"))); // NOI18N
        btn_cam_pre.setText("Cambiar Precio");
        btn_cam_pre.setEnabled(false);
        btn_cam_pre.setFocusable(false);
        btn_cam_pre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cam_preActionPerformed(evt);
            }
        });

        lbl_ayuda_principal.setText("Ayuda:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_buscar_producto)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cbx_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_usuario))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_cam_can)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_cam_pre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_eli))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 818, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_subt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_igv, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1))
                            .addComponent(lbl_tot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_reg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_clo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_ayuda_principal)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbx_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_buscar_producto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_subt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_igv, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_tot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_reg, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btn_clo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_eli, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cam_can, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_cam_pre, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_ayuda_principal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_cloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cloActionPerformed
        frm_ver_mis_productos.origen = "";
        this.dispose();
    }//GEN-LAST:event_btn_cloActionPerformed

    private void btn_regActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_regActionPerformed
        btn_reg.setEnabled(false);
        Calendar c = Calendar.getInstance();
        String anio = Integer.toString(c.get(Calendar.YEAR));
        int codigo = 1;
        try {
            Statement st = con.conexion();
            String c_codigo = "select id from pedido_cliente where anio = '" + anio + "' and tienda = '" + tienda + "' and empresa = '" + empresa + "' order by id desc limit 1";
            System.out.println(c_codigo);
            ResultSet rs = con.consulta(st, c_codigo);
            while (rs.next()) {
                codigo = rs.getInt("id") + 1;
            }
            con.cerrar(rs);
            con.cerrar(st);
        } catch (SQLException e) {
            System.out.println(e.getLocalizedMessage());
        }

        Double total_bd = subtotal() * 1.18;
        int resultado = -1;
        try {
            Statement st = con.conexion();
            String i_pedido = "insert into pedido_cliente values ('" + codigo + "', '" + anio + "','" + tienda + "', '" + empresa + "', NOW(), '2070-01-01 00:00:01', "
                    + "'0', '" + usu.getNick() + "', '', '" + total_bd + "')";
            System.out.println(i_pedido);
            resultado = con.actualiza(st, i_pedido);
            con.cerrar(st);
        } catch (Exception e) {
            System.out.println(e.getLocalizedMessage());
        }

        if (resultado > -1) {
            int nro_filas = t_detalle.getRowCount();
            if (nro_filas > 0) {
                for (int j = 0; j < nro_filas; j++) {
                    int id_producto = Integer.parseInt(t_detalle.getValueAt(j, 0).toString());
                    double cantidad = Double.parseDouble(t_detalle.getValueAt(j, 4).toString());
                    double precio = Double.parseDouble(t_detalle.getValueAt(j, 6).toString());
                    try {
                        Statement st = con.conexion();
                        String i_detalle = "insert into detalle_pedido_cliente values ('" + codigo + "', '" + anio + "', '" + tienda + "', '" + empresa + "', "
                                + "'" + id_producto + "', '" + cantidad + "', '" + precio + "')";
                        System.out.println(i_detalle);
                        con.actualiza(st, i_detalle);
                        con.cerrar(st);
                    } catch (Exception e) {
                        System.out.println(e.getLocalizedMessage());
                    }
                }
                JOptionPane.showMessageDialog(null, "EL CODIGO DE LA VENTA ES: " + codigo);
            }
        }

        this.dispose();
        frm_reg_pedido_cliente venta = new frm_reg_pedido_cliente();
        ven.llamar_ventana(venta);
    }//GEN-LAST:event_btn_regActionPerformed

    private void btn_cam_canActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cam_canActionPerformed
        String texto = JOptionPane.showInputDialog("Ingrese Cantidad");
        if (texto != null) {
            if (ven.esDecimal(texto)) {
                double cantidad = Double.parseDouble(texto);
                t_detalle.setValueAt(ven.formato_numero(cantidad), i, 4);
                calcular_total();
            }
        }

    }//GEN-LAST:event_btn_cam_canActionPerformed

    void calcular_total() {
        txt_subt.setText(ven.formato_numero(subtotal()));
        txt_igv.setText(ven.formato_numero(subtotal() * 0.18));
        lbl_tot.setText("S/. " + ven.formato_numero(subtotal() * 1.18));
        txt_buscar_producto.setText("");
        txt_buscar_producto.requestFocus();
    }

    private void t_detalleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_detalleMousePressed

    }//GEN-LAST:event_t_detalleMousePressed

    private void btn_eliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliActionPerformed
        modelo_detalle.removeRow(i);
        calcular_total();
    }//GEN-LAST:event_btn_eliActionPerformed

    private void t_detalleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_detalleFocusLost
        btn_cam_can.setEnabled(false);
        btn_eli.setEnabled(false);
    }//GEN-LAST:event_t_detalleFocusLost

    private void txt_buscar_productoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_buscar_productoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            txt_buscar_producto.setText("");
            txt_buscar_producto.requestFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            jd_productos.setModal(true);
            jd_productos.setTitle("Listar Productos");
            jd_productos.setSize(1100, 550);
            jd_productos.setLocationRelativeTo(null);
            txt_jd_buscar.setText("");
            txt_jd_buscar.requestFocus();
            Cl_Productos pro = new Cl_Productos();
            String query = "select p.id_producto, p.descripcion, pe.ubicacion, p.tipo_producto, um.corto, pe.cantidad_actual, pe.cantidad_minima, p.precio "
                    + "from productos_almacenes as pe inner join productos as p on pe.id_producto = p.id_producto inner join unidad_medida as um on p.id_und_med = "
                    + "um.id_und_med where pe.id_almacen = '" + tienda + "' and pe.empresa = '" + empresa + "' order by p.descripcion asc limit 0";
            System.out.println(query);
            pro.ver_productos(t_jd_productos, query);
            jd_productos.setVisible(true);
        }

        if (evt.getKeyCode() == KeyEvent.VK_F5) {
            txt_buscar_producto.requestFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_F3) {
            btn_reg.setEnabled(true);
            btn_reg.requestFocus();
        }
    }//GEN-LAST:event_txt_buscar_productoKeyPressed

    void cargar_productos_txt() {
        try {
            // autocompletar = new TextAutoCompleter(txt_buscar_producto);
            TextAutoCompleter autocompletar = new TextAutoCompleter(txt_buscar_producto, new AutoCompleterCallback() {
                @Override
                public void callback(Object selectedItem) {
                    txt_buscar_producto.setText("");
                    txt_buscar_producto.requestFocus();
                    String cadena = selectedItem.toString();
                    JOptionPane.showMessageDialog(null, "El usuario seleccionó: " + cadena);
                    if (cadena.length() > 0) {
                        boolean contiene_guion = false;
                        for (int j = 0; j < cadena.length(); j++) {
                            if (cadena.charAt(j) == '-') {
                                contiene_guion = true;
                            }
                        }
                        if (contiene_guion == true) {
                            contiene_guion = false;
                            String[] array_producto = cadena.split("-");
                            String id_producto = array_producto[0].trim();
                            //JOptionPane.showMessageDialog(null, "El id del Producto es : " + id_producto);

                            boolean agregar = valida_tabla(Integer.parseInt(id_producto));
                            if (agregar == true) {
                                String texto = JOptionPane.showInputDialog("Ingrese Cantidad");
                                double cantidad_nueva;
                                if (texto != null) {
                                    if (ven.esDecimal(texto)) {
                                        cantidad_nueva = Double.parseDouble(texto);
                                    } else {
                                        cantidad_nueva = 1;
                                    }
                                } else {
                                    cantidad_nueva = 1;
                                }

                                try {
                                    Statement st = con.conexion();
                                    String ver_producto = "select p.id_producto, p.descripcion, p.codigo_externo, pe.ubicacion, p.tipo_producto, um.corto, pe.cantidad_actual, pe.cantidad_minima, p.precio, f.descripcion as nombre_familia, cf.descripcion as nombre_clase from productos_almacenes as pe "
                                            + "inner join productos as p on pe.id_producto = p.id_producto inner join unidad_medida as um on p.id_und_med = um.id_und_med inner join familia_productos as f on p.familia = f.id inner join clasificacion_familia as cf "
                                            + "on cf.id= p.clase_familia and cf.familia=p.familia where pe.id_almacen = '" + frm_menu.alm.getCodigo() + "' "
                                            + "and empresa = '" + frm_menu.emp.getRuc() + "' and p.id_producto = '" + id_producto + "'";
                                    System.out.println(ver_producto);
                                    ResultSet rs = con.consulta(st, ver_producto);
                                    if (rs.next()) {
                                        Object fila[] = new Object[8];
                                        fila[0] = id_producto;
                                        fila[1] = rs.getString("tipo_producto");
                                        fila[2] = rs.getString("descripcion") + " - " + rs.getString("codigo_externo") + " - " + rs.getString("nombre_clase") + " - " + rs.getString("nombre_familia");
                                        double cantidad = rs.getDouble("cantidad_actual");
                                        fila[3] = ven.formato_numero(cantidad);
                                        //if (cantidad >= cantidad_nueva) {
                                        fila[4] = ven.formato_numero(cantidad_nueva);
                                        //} else {
                                        //  double exceso = cantidad_nueva - cantidad;
                                        //  cantidad_nueva = cantidad;
                                        //  fila[4] = ven.formato_numero(cantidad_nueva);
                                        //  JOptionPane.showMessageDialog(null, "NO HAY DEMASIADOS PRODUCTOS \n EXCESO DE " + exceso + " UNIDADES");
                                        //}
                                        fila[5] = rs.getString("corto");
                                        fila[6] = ven.formato_numero(rs.getDouble("precio"));
                                        fila[7] = ven.formato_numero(rs.getDouble("precio") * cantidad_nueva);

                                        //  if (cantidad > 0.0) {
                                        modelo_detalle.addRow(fila);
                                        t_detalle.setModel(modelo_detalle);
                                        calcular_total();
                                        //btn_reg.setEnabled(true);
                                        //  } else {
                                        //      JOptionPane.showMessageDialog(null, "No existe suficiente cantidad para agregar el producto.");
                                        //  }
                                    }

                                    con.cerrar(rs);
                                    con.cerrar(st);

                                } catch (SQLException | HeadlessException e) {
                                    System.out.println(e);
                                    JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                                }

                                txt_buscar_producto.setText("");
                                txt_buscar_producto.requestFocus();
                            }

                        }
                        if (contiene_guion == false) {
                            txt_buscar_producto.setText("");
                            txt_buscar_producto.requestFocus();
                        }

                        // calcular_total();
                    }
                }
            });

            autocompletar.setMode(0);
            autocompletar.setCaseSensitive(false);
            Statement st = con.conexion();
            String sql = "select p.id_producto, p.descripcion, p.codigo_externo, pe.ubicacion, p.tipo_producto, um.corto, pe.cantidad_actual, pe.cantidad_minima, f.descripcion as nombre_familia, cf.descripcion as nombre_clase, p.precio from productos_almacenes as pe "
                    + "inner join productos as p on pe.id_producto = p.id_producto inner join unidad_medida as um on p.id_und_med = um.id_und_med inner join familia_productos as f on p.familia = f.id inner join clasificacion_familia as cf "
                    + "on cf.id= p.clase_familia and cf.familia=p.familia where pe.id_almacen = '" + frm_menu.alm.getCodigo() + "' "
                    + "and empresa = '" + frm_menu.emp.getRuc() + "'";
            ResultSet rs = con.consulta(st, sql);
            while (rs.next()) {
                autocompletar.addItem(rs.getString("p.id_producto") + " - " + rs.getString("p.descripcion") + " - " + rs.getString("p.codigo_externo") + " -- S/ " + rs.getString("p.precio") + " -- Cant.: " + rs.getString("pe.cantidad_actual"));
            }
            con.cerrar(rs);
            con.cerrar(st);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error " + e.getLocalizedMessage());
            System.out.println(e.getLocalizedMessage());
        }
    }

    private boolean valida_tabla(int producto) {
        //estado de ingreso
        boolean ingresar = false;
        boolean validado = false;
        int cuenta_iguales = 0;

        //verificar fila no se repite
        int contar_filas = t_detalle.getRowCount();
        if (contar_filas == 0) {
            ingresar = true;
        }

        if (contar_filas > 0) {
            for (int j = 0; j < contar_filas; j++) {
                int id_producto_fila = Integer.parseInt(t_detalle.getValueAt(j, 0).toString());
                if (producto == id_producto_fila) {
                    cuenta_iguales++;
                    JOptionPane.showMessageDialog(null, "El Producto a Ingresar ya existe en la lista");
                    ingresar = false;
                } else {
                    ingresar = true;
                }
            }
        }

        if (ingresar == true && cuenta_iguales == 0) {
            validado = true;
        }
        return validado;
    }

    private void t_detalleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_detalleKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int nro_filas = t_detalle.getRowCount();
            for (int j = 0; j < nro_filas; j++) {
                String tipo = t_detalle.getValueAt(j, 1).toString().toLowerCase();
                Double cantidad_actual = Double.parseDouble(t_detalle.getValueAt(j, 3).toString());
                Double cantidad_vendida = Double.parseDouble(t_detalle.getValueAt(j, 4).toString());
                Double precio_vendido = Double.parseDouble(t_detalle.getValueAt(j, 6).toString());
                if (tipo.equals("bien")) {
                   // if (cantidad_vendida <= cantidad_actual) {
                        t_detalle.setValueAt(ven.formato_numero(cantidad_vendida), j, 4);
                   // } else {
                   //     JOptionPane.showMessageDialog(null, "NO SE PUEDE SOBREPASAR CANTIDAD ACTUAL");
                   //     t_detalle.setValueAt("1.00", j, 4);
                   // }
                }
                t_detalle.setValueAt(ven.formato_numero(precio_vendido), j, 6);

            }
            parcial();
            txt_buscar_producto.setText("");
            txt_buscar_producto.requestFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            if (i > -1) {
                modelo_detalle.removeRow(i);
                parcial();
                txt_buscar_producto.setText("");
                txt_buscar_producto.requestFocus();
                i = -1;
            } else {
                JOptionPane.showMessageDialog(null, "NO SE HA SELECCIONADO UNA COLUMNA");
            }
        }
    }//GEN-LAST:event_t_detalleKeyPressed

    private void t_detalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_t_detalleMouseClicked
        if (evt.getClickCount() == 2) {
            int nro_filas = t_detalle.getRowCount();
            if (nro_filas > 0) {
                i = t_detalle.getSelectedRow();
                mat.setId(Integer.parseInt(t_detalle.getValueAt(i, 0).toString()));
                btn_cam_can.setEnabled(true);
                btn_cam_pre.setEnabled(true);
                btn_eli.setEnabled(true);
            }
        }
    }//GEN-LAST:event_t_detalleMouseClicked

    private void txt_jd_buscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_jd_buscarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            jd_productos.dispose();
            txt_buscar_producto.setText("");
            txt_buscar_producto.requestFocus();
        }

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String bus = txt_jd_buscar.getText();
            String query = "select p.id_producto, p.descripcion, p.codigo_externo, f.descripcion as nombre_familia, cf.descripcion as nombre_clase, pe.ubicacion, p.tipo_producto, um.corto, pe.cantidad_actual, pe.cantidad_minima, p.precio "
                    + "from productos_almacenes as pe inner join productos as p on pe.id_producto = p.id_producto inner join unidad_medida as um on "
                    + "p.id_und_med = um.id_und_med inner join familia_productos as f on p.familia = f.id  inner join clasificacion_familia as cf "
                    + "on cf.id= p.clase_familia and cf.familia=p.familia where pe.id_almacen = '" + tienda + "' and pe.empresa = '" + empresa + "' and (p.codigo_externo like '%" + bus + "%' or p.descripcion like '%" + bus + "%' or "
                    + " p.caracteristicas like '%" + bus + "%') order by p.descripcion asc";
            System.out.println(query);
            mat.ver_productos(t_jd_productos, query);
            t_jd_productos.requestFocus();
        }
    }//GEN-LAST:event_txt_jd_buscarKeyPressed

    private void t_jd_productosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_jd_productosKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int contar_filas = t_jd_productos.getRowCount();
            if (contar_filas > 0) {
                int nro_fila = t_jd_productos.getSelectedRow();
                int id_producto = Integer.parseInt(t_jd_productos.getValueAt(nro_fila, 0).toString());
                boolean agregar = valida_tabla(id_producto);

                if (agregar) {

                    String texto = JOptionPane.showInputDialog("Ingrese Cantidad");
                    double cantidad_nueva = 1;
                    if (texto != null) {
                        if (ven.esDecimal(texto)) {
                            cantidad_nueva = Double.parseDouble(texto);
                        } else {
                            cantidad_nueva = 1;
                        }
                    } else {
                        cantidad_nueva = 1;
                    }

                    try {
                        Statement st = con.conexion();
                        String ver_producto = "select p.id_producto, p.descripcion, p.codigo_externo, pe.ubicacion, p.tipo_producto, um.corto, pe.cantidad_actual, pe.cantidad_minima, p.precio, f.descripcion as nombre_familia, cf.descripcion as nombre_clase from productos_almacenes as pe "
                                + "inner join productos as p on pe.id_producto = p.id_producto inner join unidad_medida as um on p.id_und_med = um.id_und_med inner join familia_productos as f on p.familia = f.id inner join clasificacion_familia as cf "
                                + "on cf.id= p.clase_familia and cf.familia=p.familia where pe.id_almacen = '" + frm_menu.alm.getCodigo() + "' "
                                + "and empresa = '" + frm_menu.emp.getRuc() + "' and p.id_producto = '" + id_producto + "'";
                        System.out.println(ver_producto);
                        ResultSet rs = con.consulta(st, ver_producto);
                        if (rs.next()) {
                            Object fila[] = new Object[8];
                            fila[0] = id_producto;
                            fila[1] = rs.getString("tipo_producto");
                            fila[2] = rs.getString("descripcion") + " - " + rs.getString("codigo_externo") + " - " + rs.getString("nombre_clase") + " - " + rs.getString("nombre_familia");
                            double cantidad = rs.getDouble("cantidad_actual");
                            fila[3] = ven.formato_numero(cantidad);
                            fila[4] = ven.formato_numero(cantidad_nueva);
                            fila[5] = rs.getString("corto");
                            fila[6] = ven.formato_numero(rs.getDouble("precio"));
                            fila[7] = ven.formato_numero(rs.getDouble("precio") * cantidad_nueva);

                            modelo_detalle.addRow(fila);
                            t_detalle.setModel(modelo_detalle);
                            calcular_total();
                        }

                        con.cerrar(rs);
                        con.cerrar(st);

                    } catch (SQLException | HeadlessException e) {
                        System.out.println(e);
                        JOptionPane.showMessageDialog(null, e.getLocalizedMessage());
                    }

                    txt_buscar_producto.setText("");
                    txt_buscar_producto.requestFocus();
                }
            }
        }

        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            txt_jd_buscar.setText("");
            txt_jd_buscar.requestFocus();
        }
    }//GEN-LAST:event_t_jd_productosKeyPressed

    private void cbx_usuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbx_usuarioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            usu.setNick(cbx_usuario.getSelectedItem().toString());
            txt_usuario.setText(usu.nombre_usuario());
            txt_buscar_producto.setEnabled(true);
            txt_buscar_producto.requestFocus();
        }
    }//GEN-LAST:event_cbx_usuarioKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jd_productos.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btn_cam_preActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cam_preActionPerformed
        String texto = JOptionPane.showInputDialog("Ingrese Precio");
        if (texto != null) {
            if (ven.esDecimal(texto)) {
                double precio = Double.parseDouble(texto);
                t_detalle.setValueAt(ven.formato_numero(precio), i, 6);
                int nro_filas = t_detalle.getRowCount();
                for (int j = 0; j < nro_filas; j++) {
                    String tipo = t_detalle.getValueAt(j, 1).toString().toLowerCase();
                    Double cantidad_actual = Double.parseDouble(t_detalle.getValueAt(j, 3).toString());
                    Double cantidad_vendida = Double.parseDouble(t_detalle.getValueAt(j, 4).toString());
                    Double precio_vendido = Double.parseDouble(t_detalle.getValueAt(j, 6).toString());
                    if (tipo.equals("bien")) {
                        if (cantidad_vendida <= cantidad_actual) {
                            t_detalle.setValueAt(ven.formato_numero(cantidad_vendida), j, 4);
                        } else {
                            JOptionPane.showMessageDialog(null, "NO SE PUEDE SOBREPASAR CANTIDAD ACTUAL");
                            t_detalle.setValueAt("1.00", j, 4);
                        }
                    }
                    t_detalle.setValueAt(ven.formato_numero(precio_vendido), j, 6);
                }
                parcial();
                txt_buscar_producto.setText("");
                txt_buscar_producto.requestFocus();
                calcular_total();
            }
        }
    }//GEN-LAST:event_btn_cam_preActionPerformed

    private void txt_jd_buscarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_jd_buscarFocusGained
        lbl_ayuda.setText("F1 - limpiar busqueda.           Enter: ejecutar busqueda            Escape: Regresar al Pedido");
    }//GEN-LAST:event_txt_jd_buscarFocusGained

    private void t_jd_productosFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_jd_productosFocusGained
        lbl_ayuda.setText("Arriba o abajo: Recorrer Tablar              Enter: Seleccionar Producto              Escape: Buscar de Nuevo");
    }//GEN-LAST:event_t_jd_productosFocusGained

    private void txt_buscar_productoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txt_buscar_productoFocusGained
        lbl_ayuda_principal.setText("F1 - limpiar busqueda.           F2: Cargar Lista de Producto            F3 y ENTER: Finalizar Pedido");
    }//GEN-LAST:event_txt_buscar_productoFocusGained

    private void cbx_usuarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbx_usuarioFocusGained
        lbl_ayuda_principal.setText("ENTER: Seleccionar Vendedor");
    }//GEN-LAST:event_cbx_usuarioFocusGained

    private void t_detalleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_t_detalleFocusGained
        lbl_ayuda_principal.setText("DOS ENTER: Ejecutar Cambios        Doble Clic + Supr: Eliminar");
    }//GEN-LAST:event_t_detalleFocusGained

    private void btn_regFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_btn_regFocusGained
        lbl_ayuda_principal.setText("ENTER: Finalizar Pedido");
    }//GEN-LAST:event_btn_regFocusGained

    private void parcial() {
        double monto = 0;
        double cantidad;
        double precio;
        int nro_filas = t_detalle.getRowCount();
        for (int j = 0; j < nro_filas; j++) {
            cantidad = Double.parseDouble(t_detalle.getValueAt(j, 4).toString());
            precio = Double.parseDouble(t_detalle.getValueAt(j, 6).toString());
            monto = (cantidad * precio);
            t_detalle.setValueAt(ven.formato_totales(monto), j, 7);
        }
        txt_subt.setText(ven.formato_totales(subtotal()));
        txt_igv.setText(ven.formato_totales(igv()));
        lbl_tot.setText("S/. " + ven.formato_totales(total()));
    }

    public static double total() {
        double monto = 0;
        double cantidad;
        double precio;
        int nro_filas = t_detalle.getRowCount();
        for (int j = 0; j < nro_filas; j++) {
            cantidad = Double.parseDouble(t_detalle.getValueAt(j, 4).toString());
            precio = Double.parseDouble(t_detalle.getValueAt(j, 6).toString());
            monto += cantidad * precio;
        }
        return monto;
    }

    public static double total_igv() {
        double monto = 0;
        double cantidad;
        double precio;
        int nro_filas = t_detalle.getRowCount();
        for (int j = 0; j < nro_filas; j++) {
            cantidad = Double.parseDouble(t_detalle.getValueAt(j, 4).toString());
            precio = Double.parseDouble(t_detalle.getValueAt(j, 6).toString());
            monto += cantidad * precio * 1.18;
        }
        return monto;
    }

    public static double igv() {
        double monto = 0;
        double cantidad;
        double precio;
        int nro_filas = t_detalle.getRowCount();
        for (int j = 0; j < nro_filas; j++) {
            cantidad = Double.parseDouble(t_detalle.getValueAt(j, 4).toString());
            precio = Double.parseDouble(t_detalle.getValueAt(j, 6).toString());
            monto += (cantidad * precio) / 6.5555;
        }
        return monto;
    }

    public static double igv_igv() {
        double monto = 0;
        double cantidad;
        double precio;
        int nro_filas = t_detalle.getRowCount();
        for (int j = 0; j < nro_filas; j++) {
            cantidad = Double.parseDouble(t_detalle.getValueAt(j, 4).toString());
            precio = Double.parseDouble(t_detalle.getValueAt(j, 6).toString());
            monto += (cantidad * precio) * 0.18;
        }
        return monto;
    }

    public static double subtotal() {
        double monto = 0;
        double cantidad;
        double precio;
        int nro_filas = t_detalle.getRowCount();
        for (int j = 0; j < nro_filas; j++) {
            cantidad = Double.parseDouble(t_detalle.getValueAt(j, 4).toString());
            precio = Double.parseDouble(t_detalle.getValueAt(j, 6).toString());
            monto += (cantidad * precio) / 1.18;
        }
        return monto;
    }

    public static double subtotal_igv() {
        double monto = 0;
        double cantidad;
        double precio;
        int nro_filas = t_detalle.getRowCount();
        for (int j = 0; j < nro_filas; j++) {
            cantidad = Double.parseDouble(t_detalle.getValueAt(j, 4).toString());
            precio = Double.parseDouble(t_detalle.getValueAt(j, 6).toString());

        }
        return monto;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cam_can;
    private javax.swing.JButton btn_cam_pre;
    public static javax.swing.JButton btn_clo;
    private javax.swing.JButton btn_eli;
    public static javax.swing.JButton btn_reg;
    private javax.swing.JComboBox cbx_usuario;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JDialog jd_productos;
    private javax.swing.JLabel lbl_ayuda;
    private javax.swing.JLabel lbl_ayuda_principal;
    public static javax.swing.JLabel lbl_tot;
    public static javax.swing.JTable t_detalle;
    private javax.swing.JTable t_jd_productos;
    private javax.swing.JTextField txt_buscar_producto;
    public static javax.swing.JTextField txt_igv;
    private javax.swing.JTextField txt_jd_buscar;
    public static javax.swing.JTextField txt_subt;
    private javax.swing.JTextField txt_usuario;
    // End of variables declaration//GEN-END:variables
}
